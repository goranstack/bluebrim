package com.bluebrim.layoutmanager.test;

import java.awt.*;
import java.awt.event.*;

import com.bluebrim.layoutmanager.*;

/**
 * This class displays the arrangement of the rectangles and also
 * controls the transformation of the rectangles when the user selects
 * any particular corner
 */

public class ViewManager extends Frame {
	// the configuration object that contains the rectangles
	// to be placed and also their respective locations
	private SolutionConfig config;
	private CheckboxGroup cbg;
	// the rectangular panel that displays the rectangles
	RectangularPanel panel;
	AppController appController;

/**
 * This class handles events that are generated by the edit button
 * and in reponse throws back the start screen
 */

class EditActionListener implements ActionListener {

	ViewManager frame; // frame to be controlled

	EditActionListener(ViewManager frame) {
		this.frame = frame;
	} // AddActionListener()

	public void actionPerformed(ActionEvent e) {
		String command = e.getActionCommand();

		// the user has chosen to edit the values, so display the
		// original frame and close this frame
		if(command.equals("Edit")) {
			if(frame.appController.arrangerThread != null) {
				// kill any arrangement being computed
				frame.appController.arrangerThread.interrupt();
			} // if
			frame.appController.setVisible(true);
			frame.dispose();
		} // if
	} // actionPerformed()
} // class EditActionListener

	/**
	 * Creates a new view manager and initializes the config to null
	 */

	public ViewManager() {
		super();
	} // ViewManager()
	/**
	 * Creates a new view manager with check boxes on the top
	 * and a panel on the centre that displays all the rectangles
	 * that are there in the collection
	 * @param config  the configuration object for this solution
	 */

	public ViewManager(AppController appController, SolutionConfig config) {
		super();
		this.appController = appController;
		this.config = config;
		// the form has a Border layout
		setLayout(new BorderLayout());
		// set the size of the form to that of the target + 25
		setSize((int)config.getTarget().getLayoutWidth()+50,
								  (int)config.getTarget().getLayoutHeight()+100);

		// Add a panel to the north with flow layout for displaying the
		// orientation check boxes
		Panel pn = new Panel();
		add(pn, "North");
		pn.setBackground(Color.lightGray);
		pn.setLayout(new FlowLayout());
		cbg = new CheckboxGroup();
		CheckboxListener chkListener = new CheckboxListener(this, cbg);

		// creat the orientation options check boxes for all the four
		// orientations
		Checkbox chkbl = new Checkbox("Bottom Left", cbg, false);
		chkbl.addItemListener(chkListener);
		Checkbox chkbr = new Checkbox("Bottom Right", cbg, true);
		chkbr.addItemListener(chkListener);
		Checkbox chktl = new Checkbox("Top Left", cbg, false);
		chktl.addItemListener(chkListener);
		Checkbox chktr = new Checkbox("Top Right", cbg, false);
		chktr.addItemListener(chkListener);
		// add the orientation option check boxes to the north panel
		pn.add(chkbl);
		pn.add(chkbr);
		pn.add(chktl);
		pn.add(chktr);

		Button edit = new Button("Edit");
		edit.setActionCommand("Edit");
		EditActionListener editActionListener = new EditActionListener(this);
		edit.addActionListener(editActionListener);
		pn.add(edit);


		// add an empty panel to the west with light gray background
		Panel t1 = new Panel();
		t1.setBackground(Color.lightGray);
		add(t1, "West");

		// this is the main panel that displays the rectangles at their
		// proper locations
		panel = new RectangularPanel(config, this);
		add(panel, "Center"); // add the main panel to the center

		// add an empty panels to the south and east
		Panel t2 = new Panel();
		t2.setBackground(Color.lightGray);
		add(t2, "South");
		Panel t3 = new Panel();
		t3.setBackground(Color.lightGray);
		add(t3, "East");
		setVisible(true); // make it visible
		addWindowListener(new Terminator(this));
	} // ViewManager()
	/**
	 * Draws the rectangles with the orientation as specified by the input
	 * @param location  the parameter specifying the orientation of the rectangles
	 *                  The possible values are BOTTOM_LEFT, BOTTOM_RIGHT,
	 *                  TOP_LEFT, and TOP_RIGHT
	 */

	public void draw(int location) {
		panel.draw(location);
	} // draw()
} // ViewManager
