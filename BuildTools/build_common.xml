<?xml version="1.0"?>

<!--
		Following global properties may be used:
		  - use-eclipse-compiler (value=dummy): If compiler in Eclipse are going to be used. If the 
		    property is not defined, javac (or "modern") is used instead.
		
		To set a property when starting Ant, use the "-D"-option. 
		Example: ant -Duse-eclipse-compiler=dummy
		Use the "Arguments" text area in the Main-tab for an Ant Configuration when using Eclipse.
-->

<project name="common" default="init">

	<property environment="env" />

	<property name="src-dir" value="src" />
	<property name="build-dir" value="build" />
	<property name="classes-dir" value="${build-dir}/classes" />
	<property name="classes-eclipse-dir" value="classes-eclipse" />
	<property name="jars-dir" value="dist" />
	<property name="javadoc-dir" value="doc/api" />
	<property name="javadoc-modules-dir" value="doc/modules" />
	<property name="javadoc-modules-fileprefix" value="system3" />
	<property name="dist-templates-dir" value="dist-templates" />
	<property name="dist-dir" value="dist" />
	<property name="build-dist-dir" value="${build-dir}/dist" />
	<property name="build-dist-lib-dir" value="${build-dist-dir}/lib" />
	<property name="build-dist-externaljars-dir" value="${build-dist-dir}/lib/external" />
	<property name="build-dist-tmp-dir" value="${build-dir}/tmp" />
	<property name="buildinfo-file-name" value="build-info.properties" />
	<property name="buildinfo-file" value="${build-dist-tmp-dir}/${buildinfo-file-name}" />
	<property name="versioninfo-file" value="${dist-templates-dir}/version-info.properties" />
	<property name="bluebrim.compile.target" value="1.5" />
	<property name="bluebrim.compile.debug" value="on" />
	<property name="bluebrim.compile.debuglevel" value="lines,source,vars" />
	<property name="bluebrim.compile.optimize" value="off" />

	<!--<taskdef name="manifestclasspath" classname="org.apache.hivemind.ant.ManifestClassPath" 
		classpath="../BuildTools/external-jars/hivemind.jar" />-->
	<taskdef name="orderedcopy" classname="com.bluebrim.ant.tasks.OrderedCopy" 
		classpath="../BuildTools/lib/BlueBrimAntTasks.jar" />
	<taskdef name="classpathgen" classname="com.bluebrim.ant.tasks.ClassPathGen" 
		classpath="../BuildTools/lib/BlueBrimAntTasks.jar;../BuildTools/external-jars/jdom.jar;../BuildTools/resources" />
	<taskdef name="jarbundler" classname="com.loomcom.ant.tasks.jarbundler.JarBundler"
	    classpath="../BuildTools/external-jars/jarbundler.jar" />
	<taskdef name="jnlp" classname="com.orangevolt.tools.ant.JNLPTask" 
		classpath="../BuildTools/lib/BlueBrimAntTasks.jar" />
	<taskdef name="jsmoothgen" classname="net.charabia.jsmoothgen.ant.JSmoothGen"
	    classpath="../BuildTools/jsmooth/lib/jsmoothgen-ant.jar"/>

	<presetdef name="bluebrim.copy.resources">
		<copy todir="${classes-dir}">
			<fileset dir="resources"/>
		</copy>
	</presetdef>

	<!-- Copy resources that is located in the src tree -->
	<presetdef name="bluebrim.copy.resources_src">
		<copy todir="${classes-dir}">
			<fileset dir="${src-dir}">
				<exclude name="**/*.java" />
				<exclude name="package.html" />
			</fileset>
		</copy>
	</presetdef>

	<presetdef name="bluebrim.jar">
		<jar basedir="${classes-dir}" compress="true" duplicate="preserve" />
	</presetdef>

	<presetdef name="bluebrim.javadoc">
		<javadoc sourcepath="${src-dir}" destdir="${javadoc-dir}">
			<packageset dir="${src-dir}">
				<include name="**" />
			</packageset>
		</javadoc>
	</presetdef>

	<presetdef name="bluebrim.javadoc.modules">
		<javadoc access="public" destdir="${javadoc-modules-dir}">
			<doclet name="se.bluebrim.doctlet.BlueBrimModuleDoclet" path="../EclipseTools/classes-eclipse">
				<param name="-fileprefix" value="${javadoc-modules-fileprefix}" />
			</doclet>
			<packageset dir="${src-dir}" />
		</javadoc>
	</presetdef>

	<presetdef name="bluebrim.copy.deployjar">
		<copy preservelastmodified="true" flatten="true"/>
	</presetdef>

	<macrodef name="bluebrim.copy.modulesdoc">
		<attribute name="project" />
		<sequential>
			<copy todir="${javadoc-modules-dir}">
				<fileset dir="../@{project}/${javadoc-modules-dir}" includes="**/*.html" />
			</copy>
		</sequential>
	</macrodef>

	<!-- Init target -->

	<target name="init" description="Init this project">
		<tstamp />
		<mkdir dir="${classes-dir}" />
		<mkdir dir="${jars-dir}" />
	</target>

	<!-- Compilation targets -->

	<target name="select-javac-compiler" unless="use-eclipse-compiler">
		<presetdef name="bluebrim.javac">
			<javac srcdir="${src-dir}" compiler="modern" destdir="${classes-dir}" 
				target="${bluebrim.compile.target}" debug="${bluebrim.compile.debug}" debuglevel="${bluebrim.compile.debuglevel}" 
				optimize="${bluebrim.compile.optimize}" deprecation="off" source="1.5">
			</javac>
		</presetdef>
	</target>

	<target name="select-eclipse-compiler" if="use-eclipse-compiler">
		<presetdef name="bluebrim.javac">
			<javac srcdir="${src-dir}" compiler="org.eclipse.jdt.core.JDTCompilerAdapter" destdir="${classes-dir}" 
				target="${bluebrim.compile.target}" debug="${bluebrim.compile.debug}" debuglevel="${bluebrim.compile.debuglevel}" 
				optimize="${bluebrim.compile.optimize}" deprecation="off" failonerror="false" nowarn="true">
			</javac>
		</presetdef>
	</target>

	<target name="compile" depends="init, select-javac-compiler, select-eclipse-compiler">
		<echo>Compiling ${ant.project.name}...</echo>
		<!-- This target does nothing. It needs to be overriden. -->
	</target>

	<target name="compile-all" description="Compiles all projects">
		<subant target="jar" buildpathref="required-projects" failonerror="true" />
		<antcall target="compile" />
	</target>

	<!-- JAR targets -->

	<target name="jar" depends="init, compile">
		<echo>Creating JAR files for ${ant.project.name}...</echo>
		<!-- This target does nothing. It needs to be overriden. -->
	</target>

	<target name="jar-all" depends="compile-all, jar" description="Creates jar-files for all projects">
	</target>

	<!-- Rebuild targets -->

	<target name="rebuild" depends="clean, jar" description="Rebuild JAR files for this project">
	</target>

	<target name="rebuild-all" depends="clean-all, jar-all" description="Rebuild JAR files for all projects">
	</target>

	<!-- JavaDoc targets -->

	<target name="doc" depends="init">
		<echo>Creating JavaDoc for ${ant.project.name}...</echo>
		<!-- This target does nothing. It needs to be overriden. -->
	</target>

	<target name="doc-all" depends="init" description="Creates JavaDoc for all projects">
		<subant target="doc" buildpathref="required-projects" failonerror="true" />
		<antcall target="doc" />
	</target>

	<target name="doc.modules" depends="init">
		<echo>Creating JavaDoc for modules in ${ant.project.name}...</echo>
		<mkdir dir="${javadoc-modules-dir}" />
		<delete dir="${javadoc-modules-dir}" includes="*.html" />
		<!-- This target does nothing. It needs to be overriden. -->
	</target>

	<target name="doc.modules-all" depends="init" description="Creates JavaDoc for modules in all projects">
		<subant target="doc.modules" buildpathref="required-projects" failonerror="true" />
		<antcall target="doc.modules" />
	</target>

	<!-- Deployment targets -->

	<!-- Init for dist-targets -->
	<target name="init-dist" depends="init">
		<delete dir="${dist-dir}" quiet="true" />
		<mkdir dir="${dist-dir}" />
		<mkdir dir="${build-dist-dir}/lib" />
		<mkdir dir="${build-dist-lib-dir}" />
		<mkdir dir="${build-dist-externaljars-dir}" />
		<mkdir dir="${build-dist-tmp-dir}" />
		<tstamp>
			<format property="FILE_TSTAMP" pattern="yyyy-MM-dd_HH.mm" />
		</tstamp>
		<property file="${versioninfo-file}" prefix="versioninfo" />
	</target>

	<target name="copy-dist-jars" depends="jar">
		<echo>Copy distribution jar-files for ${ant.project.name}...</echo>
		<!-- This target does nothing. It needs to be overriden. -->
	</target>

	<!-- Copies jar-files for distribution for all projects -->
	<target name="copy-dist-jars-all" depends="init-dist">
		<echo>Updating classpath files...</echo>
		<!--classpathgen /-->
		<subant target="copy-dist-jars" buildpathref="required-projects" failonerror="true">
			<!-- Lock build-dist-dir to the first project that assigns a value to it. -->
			<property name="build-dist-dir" location="${basedir}/${build-dist-dir}" />
		</subant>
		<antcall target="copy-dist-jars" />
	</target>

	<!-- Creates the buildinfo-file -->
	<target name="create-buildinfo" depends="init-dist">
		<property name="buildinfo-file" value="${buildinfo-file}" />
		<tstamp>
			<format property="formatted-timestamp" pattern="yyyy-MM-dd HH:mm:ss" />
		</tstamp>
		<echo file="${buildinfo-file}" append="false" message="# Ant build information ${line.separator}" />
		<concat destfile="${buildinfo-file}" append="true">
			<fileset dir="." includes="${versioninfo-file}" />
		</concat>
		<echo file="${buildinfo-file}" append="true">
ant.timestamp=${formatted-timestamp}
ant.version=${ant.version}
ant.user=${user.name}
ant.java.version=${java.version}
ant.java.home=${java.home}
ant.platform=${os.name} ${os.version}
ant.use-eclipse-compiler=${use-eclipse-compiler}
ant.compile.target=${bluebrim.compile.target}
ant.compile.debug=${bluebrim.compile.debug}
ant.compile.debuglevel=${bluebrim.compile.debuglevel}
ant.compile.optimize=${bluebrim.compile.optimize}

# EOF
		</echo>
	</target>

	<!-- Creates a IsacClientStartup.jar with manifest (pre-condition: jars exists in lib-dir and buildinfo exists) -->
	<!--target name="create-isac-client-startup" depends="">
		<path id="manifest.absolute-classpath">
			<pathelement location="${root-dir}/resources" />
			<fileset dir="${root-dir}/lib" includes="**/*.jar, **/*.zip" />
		</path>

		<manifestclasspath directory="${root-dir}" property="manifest.classpath">
			<classpath refid="manifest.absolute-classpath" />
		</manifestclasspath>

		<manifest file="${build-dist-tmp-dir}/MANIFEST.MF">
			<attribute name="Main-Class" value="${main-class-name}" />
			<attribute name="Class-Path" value="${manifest.classpath}" />
		</manifest>
		
		<jar destfile="${root-dir}/IsacClientStartup.jar" basedir="${build-dist-tmp-dir}" 
			includes="${buildinfo-file-name}" manifest="${build-dist-tmp-dir}/MANIFEST.MF">
		</jar>	
	</target-->

	<target name="dist-isac-client-prepare" depends="copy-dist-jars-all, create-buildinfo">
		<mkdir dir="${build-dist-dir}" />
		<echo message="In dist-isac-client-prepare : ${build-dist-dir}"/>
		<echo message="In dist-isac-client-prepare : ${dist-templates-dir}/IsacClient/"/>
		<copy todir="${build-dist-dir}" verbose="yes">
			<fileset dir="${dist-templates-dir}/IsacClient/" />
		</copy>
		<replace summary="true" dir="${build-dist-dir}/resources" token="@host-name@" value="${host-name}"/>
	</target>

	<!-- Creates distribution for Isac client -->
	<target name="dist-isac-client" depends="dist-isac-client-prepare">
		<zip destfile="${dist-dir}/${ant.project.name}_${versioninfo.application.version}_${FILE_TSTAMP}_win.zip" basedir="${build-dist-dir}" 
			excludes="tmp/**" />
	</target>

	<target name="complete-server-runtime-structure" depends="svnRevision" description="Copy jars and resources to the server runtime directory structure">
		<copy todir="${server-root}">
			<fileset dir="${build-dist-dir}" includes="lib/**" />
		</copy>

		<signjar keystore="../EclipseTools/sign-jar/.keystore" lazy="true" alias="bluebrim" storepass="BlueBrim">
			<fileset dir="../IsacClient/${build-dist-dir}" includes="**/*.jar" />
		</signjar>

		<!--Copy jars for the Java Web Start client -->
		<copy todir="${server-root}/web-document-root/client/" verbose="yes">
			<fileset dir="../IsacClient/${build-dist-dir}" includes="**/*.jar" />
		</copy>

		<replace summary="true" dir="${server-root}/conf">
			<replacefilter token="@database-url@" value="${database-url}"/>
			<replacefilter token="@database-username@" value="${database-username}"/>
			<replacefilter token="@database-password@" value="${database-password}"/>
			<replacefilter token="@host-name@" value="${host-name}"/>
			<replacefilter token="@admin-email-addresses@" value="${admin-email-addresses}"/>
		</replace>
		<replace summary="true" dir="${server-root}/web-document-root/client" token="@host-name@" value="${host-name}">
			<include name="**/*.html"/>
		</replace>
		<replace summary="true" dir="${server-root}" token="@host-name@" value="${host-name}">
			<include name="*"/>
		</replace>
		<tstamp>
			<format property="formatted-timestamp" pattern="yyyy-MM-dd HH:mm:ss" />
		</tstamp>
		<replace summary="true" dir="${server-root}/conf" token="@svn.Revision@" value="${svn.Revision}">
			<include name="build-version.properties"/>
		</replace>
		<replace summary="true" dir="${server-root}/conf" token="@build.date@" value="${formatted-timestamp}">
			<include name="build-version.properties"/>
		</replace>

		<!-- Copy release note -->
		<copy todir="${server-root}/web-document-root/">
			<fileset dir="doc" includes="*.html, *.txt" />
		</copy>
	</target>

	<!-- Creates distribution for Isac server (win-dev version) -->
	<target name="dist-isac-server-win-dev" depends="copy-dist-jars-all, create-buildinfo">
		<mkdir dir="${build-dist-dir}/win-dev" />

		<copy todir="${build-dist-dir}/win-dev">
			<fileset dir="${dist-templates-dir}/IsacServer-win-dev/"/>
		</copy>
		<copy todir="${build-dist-dir}/win-dev">
			<fileset dir="${dist-templates-dir}/IsacServer/" />
		</copy>

		<antcall target="complete-server-runtime-structure">
			<param name="server-root" value="${build-dist-dir}/win-dev" />
		</antcall>

		<antcall target="create-jnlp">
			<param name="server-root" value="${build-dist-dir}/win-dev" />
		</antcall>

		<zip destfile="${dist-dir}/${ant.project.name}_${host-name}_${versioninfo.application.version}_${FILE_TSTAMP}_win-dev.zip" basedir="${build-dist-dir}/win-dev" 
			excludes="tmp/**"/>
	</target>

	<!-- Creates distribution for Isac server (win version) -->
	<target name="dist-isac-server-win" depends="copy-dist-jars-all, create-buildinfo, svnRevision">
		<mkdir dir="${build-dist-dir}/win" />

		<copy todir="${build-dist-dir}/win">
			<fileset dir="${dist-templates-dir}/IsacServer/" />
		</copy>

		<antcall target="complete-server-runtime-structure">
			<param name="server-root" value="${build-dist-dir}/win" />
		</antcall>

		<antcall target="create-jnlp">
			<param name="server-root" value="${build-dist-dir}/win" />
		</antcall>

		<zip destfile="${dist-dir}/${ant.project.name}_${host-name}_${versioninfo.application.version}.${svn.Revision}_${FILE_TSTAMP}_win.zip" basedir="${build-dist-dir}/win" 
			excludes="tmp/**" />
	</target>


	<target name="dist-done">
		<echo>
Distribution of '${ant.project.name} ${versioninfo.application.version}' completed
Don't forget to tag in CVS using tag name '${versioninfo.application.cvstag}'
		</echo>
	</target>

	<!-- Cleaning targets -->

	<target name="clean" depends="clean-dist" description="Deletes generated files for this project">
		<echo>Cleaning ${ant.project.name}...</echo>
		<delete dir="${build-dir}" quiet="true" />
		<delete dir="${jars-dir}" quiet="true" />
	</target>

	<target name="clean-all" description="Deletes generated files for all projects">
		<subant target="clean" buildpathref="required-projects" failonerror="true" />
		<antcall target="clean" />
	</target>

	<!-- Deletes generated files for the dist-target (build/dist) -->
	<target name="clean-dist">
		<echo>Cleaning dist-files in ${ant.project.name}...</echo>
		<delete dir="${build-dist-dir}" quiet="true" />
	</target>

	<!-- Creates the version-info file -->
	<target name="set-dist-version" description="Creates the distribution version file" depends="set-dist-version-error, set-dist-version-ok" />
	<target name="set-dist-version-ok" if="application.version">
		<tstamp>
			<format property="formatted-timestamp" pattern="yyyy-MM-dd" />
		</tstamp>
		<property name="application.cvstag" value="${ant.project.name}_${application.version}_${formatted-timestamp}" />
		<echo file="${versioninfo-file}">
application.version=${application.version}
application.cvstag=${application.cvstag}
		</echo>
		<echo>
Application version is set to '${application.version}' for project '${ant.project.name}'
Use CVS tag '${application.cvstag}'
			
Don't forget to commit CVS file '${versioninfo-file}'
		</echo>
	</target>
	<target name="set-dist-version-error" unless="application.version">
		<echo>ERROR You must use the Eclipse launch configuration to define the application.version property.</echo>
	</target>

	<!-- Pack all source code into a zip file -->

	<target name="dist-src" depends="init-dist" description="Creates a zip file with all source code">
		<delete dir="${build-dist-dir}/src/" quiet="true" />
		<mkdir dir="${build-dist-dir}/src/"/>

		<subant target="dist-src-zip" buildpathref="required-projects" failonerror="true" >
			<!-- Lock build-dist-dir to the first project that assigns a value to it. -->
			<property name="build-dist-dir" location="${basedir}/${build-dist-dir}" />
		</subant>
		<antcall target="dist-src-zip" />

		<mkdir dir="${dist-dir}" />
		<zip destfile="${dist-dir}/${ant.project.name}_${FILE_TSTAMP}_src.zip" >
			<zipgroupfileset dir="${build-dist-dir}/src" includes="**/*-src.zip" />
		</zip>
	</target>

	<target name="dist-src-zip">
		<zip destfile="${build-dist-dir}/src/${ant.project.name}-src.zip" basedir="..">
			<include name="${ant.project.name}/.classpath" />
			<include name="${ant.project.name}/.project" />
			<include name="${ant.project.name}/build*.xml" />
			<include name="${ant.project.name}/src*/**" />
			<include name="${ant.project.name}/external-jars/**" />
		</zip>
	</target>


	<!-- JSmooth targets -->

	<target name="create-exe-wrapper" description="Creates an .exe file for starting the application">
		<jsmoothgen project="jsmooth.xml" 
		      skeletonroot="../BuildTools/jsmooth/skeletons"/>
	</target>

	<!-- CVS targets -->

	<target name="cvs-changelog" depends="init">
		<cvschangelog dir="." destfile="${build-cvs-dir}/${ant.project.name}-cvslog.xml" start="1 Jan 2005" />
	</target>

	<target name="cvs-changelog-all" depends="init" description="Creates CVS log files for all projects">
		<property name="build-cvs-dir" location="build/cvs-log" />
		<delete dir="${build-cvs-dir}" quiet="true" />
		<mkdir dir="${build-cvs-dir}" />
		<subant target="cvs-changelog" buildpathref="required-projects" failonerror="false">
			<!-- Lock build-cvs-dir to the first project that assigns a value to it. -->
			<property name="build-cvs-dir" location="${build-cvs-dir}" />
		</subant>
		<antcall target="cvs-changelog" />
		<zip destfile="build/dist/${ant.project.name}-cvslog.zip" basedir="${build-cvs-dir}" />
	</target>

	<!-- SVN targets -->

	<path id="svnkit-classpath">
		<pathelement location="../EclipseTools/external-jars/svnkit/ganymed.jar" />
		<pathelement location="../EclipseTools/external-jars/svnkit/svnkit.jar" />
		<pathelement location="../EclipseTools/external-jars/svnkit/svnkit-cli.jar" />
	</path>

	<!-- Sets the svn.Revision property by modifying the output file tmp.txt to a
	property file that is loaded as Ant properties. The file contains other properties as well
	but they are not used -->
	<target name="svnRevision">
		<!-- This task is obsolete I think. Remove it -->
		<java classname="org.tmatesoft.svn.cli.SVN" fork="true" output="temp.txt">
			<arg value="info" />
			<arg value="svn://hulk/iprobe-dev" />
			<classpath refid="svnkit-classpath"/>
		</java>
		<replace summary="true" file="temp.txt" token=": " value="="/>
		<property file="temp.txt" prefix="svn."/>
		<delete file="temp.txt"/>
		<echo>svn.Revision = ${svn.Revision}</echo>
	</target>

	
	<target name="replace-svn-revision">
		<property name="filename" value="temp.txt"/> <!-- may be overridden by calling target -->
		<java classname="org.tmatesoft.svn.cli.SVN" fork="true" output="temp.txt">
			<arg value="info" />
			<arg value="svn://hulk/iprobe-dev" />
			<classpath refid="svnkit-classpath"/>
		</java>
		<replace summary="true" file="temp.txt" token=": " value="="/>
		<property file="temp.txt" prefix="svn."/>
		<delete file="temp.txt"/>
		<echo>svn.Revision = ${svn.Revision}</echo>
		<replace summary="true" file="${filename}" token="@svn.Revision@" value="${svn.Revision}"/>
	</target>

</project>
