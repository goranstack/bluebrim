package com.bluebrim.layoutmanager;

import java.util.*;

/**
 * This class represents a priority list wherein the elements in the list
 * are arranged based on certain priority like cost etc. This class
 * is used to arrange the configurations generated by the program
 * in ascending order of cost. The items in the list have to implement
 * Comparable for being put into the list
 */

public class PriorityList {
	private Vector list;

	/**
	 * Creates an empty priority list
	 */
	PriorityList() {
		list = new Vector();
	} // PriorityList()
   /**
	* Returns the element at the specified index. To be used if direct access
	* is required. Returns null if the element at the specified index does
	* not exist
	* @param index  the index of the element into the list
	* @return Object  the object present at the given index, null if none
	*/

   public Object elementAt(int index) {
	   return list.elementAt(index);
   } // elementAt()            
	/**
	 * Inserts an element into the list in the descending order of costs
	 * Inserts at the first location where it finds an element with either
	 * equal or larger cost element. If this is the largest, then the element
	 * is inserted at the end
	 * @param c  the element to be inserted into the list
	 */


	public void insert(Comparable c) {

		// if the list is empty then add it to the start
		if(list.isEmpty()) {
			list.addElement(c);
			return;
		} // if

		for(int index = 0; (index < list.size()); index++) {
			if( (c.compareTo((SolutionConfig)list.elementAt(index))<0) ||
								   (c.compareTo((SolutionConfig)list.elementAt(index))==0 ) ) {
				//System.out.println("insert..index value: " + index);
				list.insertElementAt(c, index); // insert at the location found
				return;
			} // if
		} // for

		list.addElement(c); // this is the largest cost element, so insert it at the end
   } // insert               
   /**
	* Checks if the list is empty
	* @return boolean   indicates whether the list is empty or not
	*/

   public boolean isEmpty() {
	   return list.isEmpty();
   } // isEmpty()            
   /**
	* Removes an element with the least cost, which is the element at
	* location 0 and returns the removed element. Returns null if the
	* list is empty
	* @return  Object  the element that was removed, null if none
	*/

   public Object remove() {

	   if(!list.isEmpty()) {
		   Object temp = list.elementAt(0);
		   list.removeElementAt(0);
		   //System.out.println("Removing element at..0");
		   return temp;
	   } // if
	   return null;
   } // remove()            
   /**
	* Returns the number of elements in the list
	* @return int  the size of the list, 0 if empty
	*/

   public int size() {
	   return list.size();
   } // size()            
} // class PriorityList
